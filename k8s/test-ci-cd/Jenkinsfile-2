@NonCPS
def configFromBranch(branch) {

    def env_develop = [
        k8sContext: 'docker-desktop',
        deploymentFile: 'deployment.yml',
        namespace: 'applications'
        ]    
    def env_prd = [
        k8sContext: 'docker-desktop',
        deploymentFile: 'deployment.yml',
        namespace: 'applications'
    ]
     if (branch ==~ /(development)/) { 
        return [
            shouldTest: false,
            shouldAnalyze: false,
            shouldBuildImage: false,
            shouldPushImage: true,
            shouldDeploy: false,
            shouldDeployRancher: true,
            nexusUpload: false,
            awsAK: "aws-ak-sandbox",
            awsSK: "aws-sk-sandbox",
            kubeconfig: "config-eks-benflex",
            rancherBenCred: 'rancher2-qa-ben-2023',
            k8sDomain: 'itpreprodb',
            envK8sSuffix: 'com',
            env: 'develop',
            tag: 'dev',
            envName: 'dev' ,
            deployments: [env_develop]
        ]
    }   
       
    else if (branch ==~ /(main)/) {
        return [
            shouldTest: false,
            shouldAnalyze: false,
            shouldBuildImage: true,
            shouldPushImage: true,
            shouldDeploy: false,
            nexusUpload: false,
            awsAK: "",
            awsSK: "",
            kubeconfig: "",
            env: 'production',
            tag: 'prd',
            envName: 'prd' ,
            deployments: [env_prd]
        ]
    }
    else {
        return [
            shouldTest: true,
            shouldAnalyze: true,
            shouldBuildImage: false,
            shouldPushImage: false,
            shouldDeploy: false,
            nexusUpload: false,
            awsAK: "aws-ak-sandbox",
            awsSK: "aws-sk-sandbox",
            kubeconfig: "config-eks-benflex",
            tag: '-',
            deployments: []
        ]
    }
}

pipeline {
    agent none
    
    environment {
        CONFIG = configFromBranch(BRANCH_NAME)
        SHOULD_TEST = "${CONFIG.shouldTest}"
        SHOULD_ANALYZE = "${CONFIG.shouldAnalyze}"
        SHOULD_BUILD_IMAGE = "${CONFIG.shouldBuildImage}"
        SHOULD_PUSH_IMAGE = "${CONFIG.shouldPushImage}"
        SHOULD_DEPLOY = "${CONFIG.shouldDeploy}"
        SHOULD_DEPLOY_RANCHER = "${CONFIG.shouldDeployRancher}"
        RANCHERBEN_CRED = "${CONFIG.rancherBenCred}"
        NEXUS_UPLOAD = "${CONFIG.nexusUpload}"
        AWS_ACCESS_KEY = "${CONFIG.awsAK}"
        AWS_SECRET_KEY = "${CONFIG.awsSK}"
        KUBECONFIG = "${CONFIG.kubeconfig}"
        JAR_SUFFIX = "${CONFIG.jarSuffix}"
        ENV = "${CONFIG.env}"
        NAME ="${CONFIG.namespace}"
        TAG = "${CONFIG.tag}"
        ENV_NAME = "${CONFIG.envName}"
        K8S_DOMAIN = "${CONFIG.k8sDomain}"
        ENV_K8S_SUFFIX = "${CONFIG.envK8sSuffix}"


        RANCHER_CRED = "${CONFIG.rancherCred}"
        RANCHER_URL = "${CONFIG.rancherURL}"

        PROJECT_NAME="flx-wrk-autorizador-estorno"
        GIT_URL="git@bitbucket.org:benvisavale/{$PROJECT_NAME}.git" //configurar ssh no Jenkins

        IMAGE_URL = "957723433972.dkr.ecr.sa-east-1.amazonaws.com/${PROJECT_NAME}" //Configurar Dockerhub
    }
          
    stages {
        stage ('CI') {
            /*agent {
                label 'TestContainer'
            }*/
            /*tools {
                jdk 'jdk11-open'
            }  */          
            stages {
                stage('SCM - Checkout') {
                    steps{
                        cleanWs()
                        git branch: BRANCH_NAME,
                        credentialsId: "personal-github",
                        url: GIT_URL
                        echo 'SCM Checkout'
                    }
                }
                stage ('Tests'){
                    when {
                        expression { SHOULD_TEST == 'true' }
                    }
                    stages {
                        stage('Integration Tests - Gradle'){
                            steps {
                                sh "chmod +x ./gradlew"
                                sh "./gradlew -i clean test jacocoTestReport jacocoTestCoverageVerification --stacktrace"
                            }
                        }
                        stage('Code coverage - Jacoco'){
                            steps{
                                jacoco(
                                    execPattern: 'build/jacoco/*.exec',
                                    classPattern: '**/classes/kotlin/main',
                                    sourcePattern: '**/src/main/kotlin',
                                    sourceInclusionPattern: '**/*.kt',
                                    exclusionPattern: 'src/test*'
                                )
                            }
                        }
                    }
                }
                stage ('SonarQube & Quality Gate'){
                    when {
                        expression { SHOULD_ANALYZE == 'true' }
                    }
                    stages{
                        stage('Analysis - SonarQube'){
                            steps {
                                withSonarQubeEnv('SONAR'){
                                    sh "./gradlew -i sonarqube --stacktrace \
                                    -Dsonar.projectKey=${PROJECT_NAME}-${BRANCH_NAME} \
                                    -Dsonar.projectName=${PROJECT_NAME}-${BRANCH_NAME}"
                                }
                            }
                        }
                        stage('Quality gate'){
                            steps {
                                timeout ( time: 1, unit: 'HOURS'){
                                    script{
                                        def qg = waitForQualityGate()
                                        if (qg.status != 'OK'){
                                            error "Pipeline aborted due to a quality gate failure: ${qg.status}"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        stage ('CD') {
            stages {
                stage ('Deploy') {
                    agent {
                        label 'Build'
                    }
                    tools {
                        jdk 'jdk11-open'
                    }
                    stages{                       
                        stage ('Build Application'){
                            steps{
                             sh "chmod +x ./gradlew"   
                             sh "./gradlew -i assemble"
                            }
                        }
                        stage ('Nexus upload'){
                            when {
                              expression { NEXUS_UPLOAD == 'true'} 
                            }
                            steps{

                                sh "./gradlew -i uploadArchives"

                            }
                        }                                                                               
                        stage ('Docker - Build') {
                            when {
                              expression { SHOULD_BUILD_IMAGE == 'true' }
                            }                  
                            steps {
                                script{
                                    VERSION = sh(script: './gradlew properties --no-daemon --console=plain -q | grep "^version:" | awk \'{printf $2}\' | xargs', , returnStdout: true).trim()
                                    IMAGE = "${IMAGE_URL}:${TAG}-${VERSION}"
                                }
                                withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', accessKeyVariable: 'AWS_ACCESS_KEY_ID', credentialsId: 'ben-ecr', secretKeyVariable: 'AWS_SECRET_ACCESS_KEY']]) {
                                    //sh "export AWS_DEFAULT_REGION=sa-east-1"
                                    //sh "\$(/usr/local/bin/aws ecr get-login --no-include-email --region sa-east-1)"
                                    sh "docker build --pull -t ${IMAGE} --no-cache ."
                                }
                            }
                        }
                        stage('Docker - Push'){
                            when {
                              expression { SHOULD_PUSH_IMAGE == 'true' }
                            }
                            steps{
                                withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', accessKeyVariable: 'AWS_ACCESS_KEY_ID', credentialsId: 'ben-ecr', secretKeyVariable: 'AWS_SECRET_ACCESS_KEY']]) {
                                    //sh "export AWS_DEFAULT_REGION=sa-east-1" 
                                    sh "docker push ${IMAGE}"
                                    echo "Image push complete"
                                }
                            }
                        }
                        stage('K8S - Deploy'){
                            when {
                              expression { SHOULD_DEPLOY == 'true' }
                            }
                            steps {
                                script { 
                                    for (deployment in configFromBranch(BRANCH_NAME).deployments) {
                                        withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', accessKeyVariable: 'AWS_ACCESS_KEY_ID', credentialsId: 'ben-sandbox-aws', secretKeyVariable: 'AWS_SECRET_ACCESS_KEY']]) {
                                            sh """
                                                export AWS_DEFAULT_REGION=us-east-2
                                                """
                                            sh """
                                                sed '
                                                  s,{{IMAGE_URL}}, ${IMAGE},g;
                                                  s,{{NAMESPACE}},${deployment.namespace},g;
                                                  s,{{PROJECT_NAME}},${PROJECT_NAME},g;
                                                  s,{{TAG}},${TAG},g;
                                                  s,{{ENV_NAME}},${ENV_NAME},g;
                                                  s,{{K8S_DOMAIN}},${K8S_DOMAIN},g;
                                                  s,{{ENV_K8S_SUFFIX}},${ENV_K8S_SUFFIX},g;
                                                ' ${deployment.deploymentFile} | kubectl apply --kubeconfig /home/jenkins/.kube/${KUBECONFIG} -f -
                                                """ 
                                        }      
                                        
                                    }   
                                }
                            }
                        }
                        stage('Deploy ArgoCD'){
                            when {
                              expression { SHOULD_DEPLOY_RANCHER == 'true' }
                            }
                            steps { //put git commands here
                                script {
                                    for (deployment in configFromBranch(BRANCH_NAME).deployments) {
                                        withCredentials([string(credentialsId: "${RANCHERBEN_CRED}", variable: 'rancherToken')]) {
                                        sh "echo yes | /usr/bin/rancher login --token ${rancherToken}  --context ${deployment.rancherContext} --name rancher2 https://ec2-18-228-89-100.sa-east-1.compute.amazonaws.com/v3"
                                         
        
                                        sh """
                                            sed '
                                              s,{{IMAGE_URL}},${IMAGE},g;
                                              s,{{NAMESPACE}},${deployment.namespace},g;
                                              s,{{PROJECT_NAME}},${PROJECT_NAME},g;
                                              s,{{TAG}},${TAG},g;
                                              s,{{ENV_NAME}},${ENV_NAME},g;
                                              s,{{K8S_DOMAIN}},${K8S_DOMAIN},g;
                                              s,{{ENV_K8S_SUFFIX}},${ENV_K8S_SUFFIX},g;
                                            ' ${deployment.deploymentFile} | /usr/bin/rancher kubectl apply -f -
                                            """
                                         }
                                     } 
                                }
                             }
                         }                        
                    }
                }
            }
        }
    }
}
